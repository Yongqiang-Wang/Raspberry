/*
	Agent.cpp
*/
#include <math.h>
#include "agent.h"
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <iostream>

#include <unistd.h>
#define KEY_LENGTH 512
#define STATE_FACTOR 10000
#define ALPHA_FACTOR 10
#define SERVICE_PORT 21231
#define RESPONSE_PORT 21232
#define BUFSIZE 2048
#define BUFLEN 2048

//#define ALPHA_RULE rand() % ALPHA_FACTOR + 1
using namespace std;
Agent::Agent(std::string _id)
  :id(_id),
   state(0.0),
   alpha(1),
   long_state(0),
   diff_state(0)
{
  // Generate key pair
  paillier_keygen(KEY_LENGTH,
		  &pubKey,
		  &prvKey,
		  paillier_get_rand_devurandom);

  // Open the log file:
  logfile = fopen(id.append(".log").c_str(), "w");
  if (logfile == NULL)
    {
      printf("%s log open failed\n", id.c_str());
    }
  
  alpha = rand() % ALPHA_FACTOR + 1;
}

Agent::~Agent()
{
  // Close the log file
  if(logfile != NULL)
    fclose(logfile);

  // Destroy the key pair
  paillier_freepubkey(pubKey);
  paillier_freeprvkey(prvKey);
}

int Agent::communicate()
{
  long_state = -(long) lround(state * STATE_FACTOR);
  paillier_plaintext_t* m_s = paillier_plaintext_from_ui(long_state);
  paillier_ciphertext_t* c_s = NULL;
  c_s = paillier_enc(NULL, pubKey, m_s,
		     paillier_get_rand_devurandom);
    char* hexPubKey = paillier_pubkey_to_hex(pubKey); //serialize pub key
    char* byteCtxt = (char*)paillier_ciphertext_to_bytes(PAILLIER_BITS_TO_BYTES(pubKey->bits)*2, c_s);//serialize cypher
    int count = 1;//send is one, this is a request
		int s_pub = strlen(hexPubKey);
		int s_ctxt = PAILLIER_BITS_TO_BYTES(pubKey->bits)*2;
		 int i=0;
		char type[sizeof(int)];
		memcpy(&type,&count,sizeof(int));
    int data = sizeof(int) + sizeof(int)+sizeof(int) +strlen(hexPubKey) + strlen(byteCtxt) ;
		char sendBuf[BUFSIZE];
		memcpy(&sendBuf[i],&type,sizeof(int)); i+=sizeof(int); //add type
		memcpy(&sendBuf[i],&s_pub,sizeof(int)); i+=sizeof(int); //add size of public key
		memcpy(&sendBuf[i],&s_ctxt,sizeof(int)); i+=sizeof(int); //add size of cypher text
		
    strcpy(&sendBuf[i],hexPubKey);i+=s_pub;
    char r[s_ctxt];
     for(int k=i;k<i+s_ctxt;k++)
     {
       sendBuf[k] = byteCtxt[k-i];
     }
     i+=s_ctxt;
     struct sockaddr_in myaddr, remaddr;
	int fd, slen=sizeof(remaddr);
	char *server = "192.168.43.183";	/* change this to use a different server */
	char buf[BUFLEN];

	/* create a socket */

	if ((fd=socket(AF_INET, SOCK_DGRAM, 0))==-1)
		cout << "socket created\n" ;
        memset((char *)&myaddr, 0, sizeof(myaddr));
	myaddr.sin_family = AF_INET;
	myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	myaddr.sin_port = htons(0);
    if (bind(fd, (struct sockaddr *)&myaddr, sizeof(myaddr)) < 0) {
		cout << "bind failed";
		return 0;
	}    
    memset((char *) &remaddr, 0, sizeof(remaddr));
	remaddr.sin_family = AF_INET;
	remaddr.sin_port = htons(RESPONSE_PORT);
	if (inet_aton(server, &remaddr.sin_addr)==0) {
		cout << "inet_aton() failed\n";
		exit(1);
	}
    int k=0;
    for (k=0; k < 1; k++) {
	//	cout << "Sending packet \n";
		if (sendto(fd, sendBuf, i, 0, (struct sockaddr *)&remaddr, slen)==-1)
			cout << "Error at sendto";
	}
	close(fd);
  paillier_freeplaintext(m_s);
  paillier_freeciphertext(c_s);
 
  return 0;
}

double Agent::setState(const double st)
{
  state = st;
  old_state = state;
  alpha = updateAlpha();
  old_alpha = alpha;
  logState();
  return state;
}
double Agent::setDiff(const double diff)
{
  diff_state = diff;
}
int Agent::updateState()
{
  /*
    > convert diff_state to double
    > and add to state 
    > change alpha
    > log the state
  */
  old_state = state;
  state += diff_state / ( (double) STATE_FACTOR * ALPHA_FACTOR * ALPHA_FACTOR);
  old_alpha = alpha;
  alpha = updateAlpha();

  logState();
  return 0;
}

int Agent::logState()
{
  fprintf(logfile, "%8.4lf\t%2ld\t%ld\n", state, alpha, diff_state);
}


/*
  This function is called by another Agent 
 */
int Agent::exchange(paillier_pubkey_t* pub,
		    paillier_ciphertext_t* msg_in,
		    paillier_ciphertext_t* msg_out)
{
    paillier_plaintext_t* m_a;
  // create the negative of the current state
   // cout<< "resp_counter: " << _myVector[0].resp_counter << " req_counter: " <<_myVector[0].req_counter <<endl;
  	if(_myVector[0].resp_counter >	_myVector[0].req_counter)
    {
      long_state = (long) lround(old_state * STATE_FACTOR);
      m_a = paillier_plaintext_from_ui(old_alpha);
    }
    else
    {
      
      long_state = (long) lround(state * STATE_FACTOR);
      m_a = paillier_plaintext_from_ui(alpha);
      
    }

  // encrypt the state
  paillier_plaintext_t* m_s = paillier_plaintext_from_ui(long_state);
 // cout<<"Response old alpha: " << old_alpha <<endl;
  //paillier_plaintext_t* m_a = paillier_plaintext_from_ui(alpha);
  
  paillier_ciphertext_t* c_s = NULL;
  c_s = paillier_enc(NULL, pub, m_s,
		     paillier_get_rand_devurandom);

  paillier_ciphertext_t* c_d = paillier_create_enc_zero();

  // c_d = ENC( x_j + (-x_i) )
  paillier_mul(pub, c_d, msg_in, c_s);

  if (msg_out == NULL)
    msg_out = paillier_create_enc_zero();
  
  // msg_out = ENC( alpha * (x_j + (-x_i) )
  paillier_exp(pub, msg_out, c_d, m_a);


  paillier_freeplaintext(m_s);
  paillier_freeplaintext(m_a);
  paillier_freeciphertext(c_s);
  paillier_freeciphertext(c_d);
  return 0;
}

long Agent::ciphertext_to_long(paillier_ciphertext_t* c)
{
  paillier_plaintext_t* m = paillier_dec(NULL, pubKey, prvKey, c);

  size_t nBytes = 0;
  unsigned char* bytes = (unsigned char*) mpz_export(0, &nBytes, 1, 1, 0, 0, m->m);

  long int e = 0;
  //  assert( nBytes > sizeof(a));
  //  for(int i=nBytes-1; i >= nBytes-sizeof(a); --i)
  for(int i= nBytes-sizeof(long); i < nBytes; i++)
  {
      e = (e << 8) | bytes[i];
  }

  paillier_freeplaintext(m);
  free(bytes);
  return e;
}

long Agent::updateAlpha()
{
  return rand() % ALPHA_FACTOR + 1;
  //  return ALPHA_FACTOR;
  //return alpha;
}
